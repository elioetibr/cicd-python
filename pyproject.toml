[tool.poetry]
name = "cicd"
version = "0.1.0"
description = "CICD Python Shared Library"
authors = ["Elio Severo Junior <elioseverojunior@gmail.com>"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "~3.12"

[tool.poetry.group.dev.dependencies]
black = "~24.8.0"
build = "~1.2.1"
commitizen = "~3.29.0"
coverage = "~7.6.1"
multiprocess = "~0.70.16"
mypy = "~1.11.1"
pip-tools = "~7.4.1"
pyproject-hooks = "~1.1.0"
pytest = "~8.3.2"
pytest-cov = "~5.0.0"
pytest-md-report = "~0.6.2"
pytest-mock = "~3.14.0"
pytest-xdist = "~3.6.1"
pyyaml = "~6.0.2"
ruff = "~0.5.6"
setuptools = "~72.1.0"
wheel = "~0.44.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-s -vv --durations=0"
cache_dir = ".cache/pytest_cache"
md_report = true
md_report_verbose = 1
md_report_color = "auto"
md_report_flavor = "common_mark"

[tool.coverage.run]
branch = true
source = ["cicd"]
command_line = "-m pytest"

[tool.coverage.report]
show_missing = true
exclude_also = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py312"]
line-length = 120

[tool.ruff]
lint.select = [
  "E", # pycodestyle
  "F", # pyflakes
  "UP", # pyupgrade
  "B", # flake8-bugbear
  "I", # isort
]
exclude = [".venv"]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.mypy]
